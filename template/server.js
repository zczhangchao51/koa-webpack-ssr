const fs = require('fs')
const path = require('path')

const LRU = require('lru-cache')
const Koa = require('koa')

const serve = require('koa-static')
const routeCache = require('./middlewares/koa-route-cache')
const routeEtag = require('./middlewares/koa-route-etag')
const config = require('./config')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')

const isProd = process.env.NODE_ENV === 'production'
const serverInfo =
  `koa/${require('koa/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = new Koa()

function createRenderer(bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(
    bundle,
    Object.assign(options, {
      // for component caching
      cache: LRU({
        max: 1000,
        maxAge: 1000 * 60 * 15
      }),
      // this is only needed when vue-server-renderer is npm-linked
      basedir: resolve(config.build.assetsRoot),
      // recommended for performance
      runInNewContext: false
    })
  )
}

let renderer
let readyPromise
const templatePath = resolve(config.base.templatePath)
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require(path.join(
    config.build.assetsRoot,
    'vue-ssr-server-bundle.json'
  ))
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require(path.join(
    config.build.assetsRoot,
    'vue-ssr-client-manifest.json'
  ))
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}

app.use(serve('static'))

if (isProd) {
  app.use(serve('dist'))
}

if (isProd) {
  // 手动处理缓存协商，每个特定页面对应一个etag，如果缓存协商生效则直接返回304
  app.use(routeEtag(() => true))

  // 对部分不可变页面进行缓存，需要小心检查页面是否不可变
  app.use(
    routeCache(({ originalUrl }) => {
      return originalUrl === '/static'
    })
  )
}

function render(ctx) {
  const s = Date.now()

  ctx.type = 'html'
  ctx.status = 200
  ctx.set('X-Power-By', serverInfo)

  const handleError = err => {
    if (err.redirect) {
      ctx.redirect(err.redirect)
    } else {
      // Render Error Page
      ctx.url = '/error'
      if (err instanceof Error) {
        ctx.vueRenderError = {
          code: 500,
          stack: err.stack,
          message: err.message
        }
        console.error(`error during render : ${ctx.url}`)
        console.error(err.stack)
      } else if (typeof err === 'string') {
        ctx.vueRenderError = {
          code: 500,
          stack: '',
          message: err
        }
      } else {
        ctx.vueRenderError = err
      }
      render(ctx)
    }
  }

  return new Promise((resolve, reject) => {
    renderer.renderToString(ctx, (err, html) => {
      if (err && !ctx.vueRenderError && !ctx.LoopError) {
        ctx.LoopError = true
        handleError(err)
        return resolve()
      }
      if (err && ctx.LoopError) {
        ctx.body = `循环错误${err.message}`
        return resolve()
      }

      ctx.body = html
      if (!isProd) {
        console.log(`whole request: ${Date.now() - s}ms`)
      }
      resolve()
    })
  })
}

app.use(
  isProd
    ? render
    : async ctx => {
      await readyPromise
      return render(ctx)
    }
)

const port = process.env.PORT || 3001
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
