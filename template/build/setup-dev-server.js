const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const webpack = require('webpack')
const chokidar = require('chokidar')
const PassThrough = require('stream').PassThrough
const clientConfig = require('./webpack.client.config')
const serverConfig = require('./webpack.server.config')

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
  } catch (e) {}
}

module.exports = function setupDevServer(app, templatePath, cb) {
  let bundle
  let template
  let clientManifest

  let ready
  /* eslint-disable */
  const readyPromise = new Promise(r => {
    ready = r
  })
  /* eslint-enable */
  const update = () => {
    if (bundle && clientManifest) {
      ready()
      cb(bundle, {
        template,
        clientManifest
      })
    }
  }

  // read template from disk and watch
  template = fs.readFileSync(templatePath, 'utf-8')
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log('index.html template updated.')
    update()
  })

  // modify client config to work with hot middleware
  clientConfig.entry.app = [
    'webpack-hot-middleware/client',
    clientConfig.entry.app
  ]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins.push(
    new webpack.NamedModulesPlugin(),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  )

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true,
    stats: {
      colors: true,
      modules: false
    }
  })

  app.use(async (ctx, next) => {
    await devMiddleware(
      ctx.req,
      {
        end: content => {
          ctx.body = content
        },
        setHeader: (name, value) => {
          ctx.set(name, value)
        }
      },
      next
    )
  })

  clientCompiler.plugin('done', stats => {
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return
    clientManifest = JSON.parse(
      readFile(devMiddleware.fileSystem, 'vue-ssr-client-manifest.json')
    )
    update()
  })

  const koaWebpackHotMiddleware = (compiler, opts) => {
    const middleware = require('webpack-hot-middleware')(compiler, {
      heartbeat: 5000,
      reload: true,
      quiet: true
    })
    return async (ctx, next) => {
      let stream = new PassThrough()
      ctx.body = stream
      await middleware(
        ctx.req,
        {
          write: stream.write.bind(stream),
          writeHead: (status, headers) => {
            ctx.status = status
            ctx.set(headers)
          }
        },
        next
      )
    }
  }
  app.use(
    koaWebpackHotMiddleware(clientCompiler, {
      heartbeat: 5000
    })
  )

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })

  return readyPromise
}
